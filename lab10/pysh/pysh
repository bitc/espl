#!/usr/bin/env python

import os, os.path, sys, getpass, shlex
import subprocess

home=os.getenv('HOME')

def getcwd():
    "like os.getcwd(), but collapses the home directory prefix into ~"
    cwd = os.getcwd()
    if cwd.startswith(home):
        cwd = '~'+cwd[len(home):]
    return cwd

def run_cmd(argv):
    out_file = None
    in_file = None
    run_in_background = False
    try:
        cmd_args = argv
        try:
            run_in_background_index = argv.index('&')
            if run_in_background_index == 0:
                print 'Syntax error in background command'
                return
            cmd_args = cmd_args[:run_in_background_index]
            run_in_background = True
        except ValueError:
            # Not running in background
            pass

        try:
            out_redirect_index = argv.index('>')
            out_file = open(argv[out_redirect_index+1], 'w')
            cmd_args = cmd_args[:out_redirect_index]
        except ValueError:
            # No output redirection
            pass
        except IndexError:
            print 'Syntax error in output redirection'
            return

        try:
            in_redirect_index = argv.index('<')
            in_file = open(argv[in_redirect_index+1], 'r')
            cmd_args = cmd_args[:in_redirect_index]
        except ValueError:
            # No input redirection
            pass
        except IndexError:
            print 'Syntax error in input redirection'
            return

        try:
            process = subprocess.Popen(cmd_args, stdin=in_file, stdout=out_file)
            if not run_in_background:
                process.wait()
        except OSError:
            print 'Error running command'
    finally:
        if in_file:
            in_file.close()
        if out_file:
            out_file.close()

def expand_vars(argv):
    def expand(arg):
        if arg[:1] == '$':
            return os.getenv(arg[1:], '')
        else:
            return arg

    return map(expand, argv)

def process_set_var(cmd):
    equals_index = cmd.index('=')
    var_name = cmd[:equals_index]
    var_value = cmd[equals_index+1:]
    os.environ[var_name] = var_value

def run_pipe(argv):
    pipe_index = argv.index('|')
    argv1 = argv[:pipe_index]
    argv2 = argv[pipe_index+1:]
    if not argv1 or not argv2:
        print 'Syntax error in pipe'
        return
    # Reference: <http://docs.python.org/2/library/subprocess.html#replacing-shell-pipeline>
    p1 = subprocess.Popen(argv1, stdout=subprocess.PIPE)
    p2 = subprocess.Popen(argv2, stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    output = p2.communicate()[0]
    print output

while True:
    print "%s@%s>" % (getpass.getuser(), getcwd()),

    argv = None
    try:
        argv = shlex.split(raw_input())
    except EOFError:
        print
        break                             # end of file from user, e.g. Ctrl-D

    if not argv:
        continue # empty command

    if argv[0] in ['exit', 'quit', 'bye']:
        break
    elif argv[0]=='cd':
        try:
            os.chdir(os.path.expanduser(argv[1])) # expand ~ to home directory
        except IndexError:                   # no arguments, chdir to home dir
            os.chdir(home)
        except OSError, s:
            print >>sys.stderr, "chdir: %s" % s
    else:
        expanded_vars = expand_vars(argv)
        if '=' in expanded_vars[0]:
            process_set_var(expanded_vars[0])
        elif '|' in expanded_vars:
            run_pipe(expanded_vars)
        else:
            run_cmd(expanded_vars)

# goodbye message
goodbye = "have a good sunny day, see you back soon"
print "*"+"-"*(len(goodbye)+2)+"*"
print "| %s |" % goodbye
print "*"+"-"*(len(goodbye)+2)+"*"
